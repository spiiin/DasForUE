// this file is generated via daScript automatic C++ binder
// all user modifications will be lost after this file is re-generated

FString _dasUnreal_static_0_Chr(const FString &,wchar_t Ch);
FString _dasUnreal_static_1_ChrN(const FString &,int NumCharacters,wchar_t Char);
FString _dasUnreal_static_2_FormatAsNumber(const FString &,int InNumber);
FString _dasUnreal_static_3_FromInt(const FString &,int Num);
FString _dasUnreal_static_4_FromBlob(const FString &,const unsigned char * SrcBuffer,const unsigned int SrcSize);
bool _dasUnreal_static_5_ToBlob(const FString &,const FString & Source,unsigned char * DestBuffer,const unsigned int DestSize);
FString _dasUnreal_static_6_FromHexBlob(const FString &,const unsigned char * SrcBuffer,const unsigned int SrcSize);
bool _dasUnreal_static_7_ToHexBlob(const FString &,const FString & Source,unsigned char * DestBuffer,const unsigned int DestSize);
FString _dasUnreal_static_8_SanitizeFloat(const FString &,double InFloat,const int InMinFractionalDigits);
FName _dasUnreal_virtual_9_GetFNameForStatID(const UObjectBase & self);
FString _dasUnreal_static_10_RemoveClassPrefix(const UObjectBase &,const wchar_t * ClassName);
void _dasUnreal_static_11_PrefetchClass(const UObjectBase &,UObject * Object);
void _dasUnreal_static_12_PrefetchOuter(const UObjectBase &,UObject * Object);
bool _dasUnreal_static_13_IsPendingKillEnabled(const UObjectBaseUtility &);
EInternalObjectFlags _dasUnreal_static_14_FixGarbageOrPendingKillInternalObjectFlags(const UObjectBaseUtility &,const EInternalObjectFlags InFlags);
bool _dasUnreal_virtual_15_CanBeClusterRoot(const UObjectBaseUtility & self);
bool _dasUnreal_virtual_16_CanBeInCluster(const UObjectBaseUtility & self);
void _dasUnreal_virtual_17_CreateCluster(UObjectBaseUtility & self);
void _dasUnreal_virtual_18_OnClusterMarkedAsPendingKill(UObjectBaseUtility & self);
const wchar_t * _dasUnreal_static_19_StaticConfigName(const UObject &);
void _dasUnreal_static_20_StaticRegisterNativesUObject(const UObject &);
void _dasUnreal_virtual_21_PostInitProperties(UObject & self);
void _dasUnreal_virtual_22_PostReinitProperties(UObject & self);
void _dasUnreal_virtual_23_PostCDOContruct(UObject & self);
bool _dasUnreal_virtual_24_PreSaveRoot(UObject & self,const wchar_t * Filename);
void _dasUnreal_virtual_25_PostSaveRoot(UObject & self,bool bCleanupIsRequired);
bool _dasUnreal_virtual_26_Modify(UObject & self,bool bAlwaysMarkDirty);
bool _dasUnreal_virtual_27_IsCapturingAsRootObjectForTransaction(const UObject & self);
void _dasUnreal_virtual_28_LoadedFromAnotherClass(UObject & self,const FName & OldClassName);
bool _dasUnreal_virtual_29_ResolveSubobject(UObject & self,const wchar_t * SubObjectPath,UObject *& OutObject,bool bLoadIfExists);
bool _dasUnreal_virtual_30_IsReadyForAsyncPostLoad(const UObject & self);
void _dasUnreal_virtual_31_PostLoad(UObject & self);
void _dasUnreal_virtual_32_BeginDestroy(UObject & self);
bool _dasUnreal_virtual_33_IsReadyForFinishDestroy(UObject & self);
void _dasUnreal_virtual_34_PostLinkerChange(UObject & self);
void _dasUnreal_virtual_35_FinishDestroy(UObject & self);
void _dasUnreal_virtual_36_ShutdownAfterError(UObject & self);
void _dasUnreal_virtual_37_PreEditUndo(UObject & self);
void _dasUnreal_virtual_38_PostRename(UObject & self,UObject * OldOuter,const FName OldName);
bool _dasUnreal_virtual_39_NeedsLoadForClient(const UObject & self);
bool _dasUnreal_virtual_40_NeedsLoadForServer(const UObject & self);
bool _dasUnreal_virtual_41_NeedsLoadForEditorGame(const UObject & self);
bool _dasUnreal_virtual_42_IsEditorOnly(const UObject & self);
bool _dasUnreal_virtual_43_HasNonEditorOnlyReferences(const UObject & self);
bool _dasUnreal_virtual_44_IsPostLoadThreadSafe(const UObject & self);
bool _dasUnreal_virtual_45_IsDestructionThreadSafe(const UObject & self);
bool _dasUnreal_static_46_CanCreateInCurrentContext(const UObject &,UObject * Template);
void _dasUnreal_virtual_47_PostEditImport(UObject & self);
bool _dasUnreal_virtual_48_Rename(UObject & self,const wchar_t * NewName,UObject * NewOuter,unsigned int Flags);
FString _dasUnreal_virtual_49_GetDesc(UObject & self);
void _dasUnreal_virtual_50_MoveDataToSparseClassDataStruct(const UObject & self);
bool _dasUnreal_virtual_51_ImplementsGetWorld(const UObject & self);
FName _dasUnreal_virtual_52_GetExporterName(UObject & self);
FRestoreForUObjectOverwrite * _dasUnreal_virtual_53_GetRestoreForUObjectOverwrite(UObject & self);
bool _dasUnreal_virtual_54_AreNativePropertiesIdenticalTo(const UObject & self,UObject * Other);
const FName & _dasUnreal_static_55_SourceFileTagName(const UObject &);
const FName & _dasUnreal_static_56_AssetVersePathTagName(const UObject &);
bool _dasUnreal_virtual_57_IsAsset(const UObject & self);
bool _dasUnreal_virtual_58_IsLocalizedResource(const UObject & self);
bool _dasUnreal_virtual_59_IsSafeForRootSet(const UObject & self);
void _dasUnreal_virtual_60_TagSubobjects(UObject & self,EObjectFlags NewFlags);
bool _dasUnreal_virtual_61_IsNameStableForNetworking(const UObject & self);
bool _dasUnreal_virtual_62_IsFullNameStableForNetworking(const UObject & self);
bool _dasUnreal_virtual_63_IsSupportedForNetworking(const UObject & self);
void _dasUnreal_virtual_64_PreNetReceive(UObject & self);
void _dasUnreal_virtual_65_PostNetReceive(UObject & self);
void _dasUnreal_virtual_66_PostRepNotifies(UObject & self);
void _dasUnreal_virtual_67_PreDestroyFromReplication(UObject & self);
void _dasUnreal_virtual_68_WillNeverCacheCookedPlatformDataAgain(UObject & self);
void _dasUnreal_virtual_69_ClearAllCachedCookedPlatformData(UObject & self);
const wchar_t * _dasUnreal_virtual_70_GetConfigOverridePlatform(const UObject & self);
void _dasUnreal_virtual_71_OverrideConfigSection(UObject & self,FString & SectionName);
void _dasUnreal_virtual_72_OverridePerObjectConfigSection(UObject & self,FString & SectionName);
UObject * _dasUnreal_static_73_GetArchetypeFromRequiredInfo(const UObject &,const UClass * Class,const UObject * Outer,FName Name,EObjectFlags ObjectFlags);
void _dasUnreal_virtual_74_MarkAsEditorOnlySubobject(UObject & self);
uint64 _dasUnreal_virtual_75_GetNetPushIdDynamic(const UObject & self);
